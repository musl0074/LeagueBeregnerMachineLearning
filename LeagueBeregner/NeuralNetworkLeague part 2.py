from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense
import numpy as np

dataset = np.array([[2, 7, 4, 8.546, 1, 7, 2, 6.7, 0],
                                [2, 6, 8, 7.229, 2, 1, 4, 5.7, 0],
                                [2, 6, 5, 10.147, 0, 5, 1, 5.7, 0],
                                [9, 6, 3, 14.306, 0, 0, 1, 7, 0],
                                [3, 5, 10, 6.784, 3, 15, 1, 1.4, 0],
                                [3, 2, 10, 5.175, 1, 8, 1, 5.8, 0],
                                [9, 3, 9, 19.556, 0, 1, 0, 6.7, 1],
                                [7, 4, 4, 14.821, 3, 9, 1, 7.6, 0],
                                [11, 4, 5, 20.904, 0, 2, 1, 8.6, 1],
                                [0, 5, 14, 8.221, 5, 20, 2, 0.8, 0],
                                [2, 7, 4, 15.747, 1, 10, 1, 6.8, 0],
                                [9, 1, 12, 22.201, 2, 2, 5, 6.8, 1],
                                [13, 3, 3, 18.488, 1, 9, 0, 6.6, 0],
                                [8, 7, 13, 25.573, 2, 12, 3, 7.7, 1],
                                [5, 8, 14, 11.932, 2, 23, 5, 0.6, 0],
                                [1, 6, 4, 14.068, 0, 9, 0, 5.9, 0],
                                [11, 8, 5, 19.464, 0, 3, 0, 4.4, 0],
                                [2, 9, 5, 12.716, 0, 8, 1, 7.4, 0],
                                [5, 7, 11, 24.793, 2, 11, 3, 7.5, 0],
                                [7, 7, 5, 11.014, 6, 23, 14, 1.5, 1],
                                [23, 4, 14, 42.012, 2, 2, 4, 6.6, 1],
                                [8, 2, 5, 21.200, 1, 7, 2, 9.1, 1],
                                [10, 7, 8, 36.737, 8, 14, 2, 6.4, 1],
                                [6, 9, 14, 24.287, 2, 11, 3, 4.9, 0],
                                [10, 4, 8, 29.011, 4, 13, 7, 6.7, 1],
                                [6, 6, 6, 22.013, 3, 7, 3, 4.7, 0],
                                [10, 5, 10, 34.817, 0, 9, 2, 6.4, 1],
                                [4, 9, 21, 11.471, 5, 27, 13, 0.7, 0],
                                [9, 10, 1, 29.884, 0, 11, 2, 6.2, 0],
                                [9, 9, 8, 19.891, 3, 2, 4, 5.6, 0],
                                [8, 6, 12, 30.489, 3, 12, 2, 6.3, 0],
                                [1, 10, 13, 12.903, 4, 17, 3, 5.8, 0],
                                [6, 2, 14, 14.522, 5, 54, 15, 1.9, 1],
                                [21, 5, 11, 47.443, 5, 10, 1, 7, 1],
                                [6, 2, 13, 13.466, 4, 7, 4, 6, 1],
                                [10, 10, 13, 25.477, 3, 9, 6, 5, 0],
                                [13, 4, 10, 23.416, 3, 11, 2, 5.6, 0],
                                [3, 6, 20, 11.496, 2, 20, 6, 1.5, 0],
                                [3, 15, 7, 13.601, 1, 6, 2, 3.3, 0],
                                [5, 10, 12, 24.763, 2, 3, 4, 5, 0],
                                [10, 10, 5, 28.031, 5, 11, 2, 6.4, 0],
                                [6, 6, 9, 17.777, 2, 10, 3, 7, 0],
                                [3, 12, 9, 7.374, 5, 35, 5, 1.2, 0],
                                [16, 5, 7, 36.775, 1, 5, 0, 6.7, 1],
                                [12, 3, 7, 27.178, 0, 4, 1, 10.8, 1],
                                [13, 1, 4, 19.729, 0, 2, 5, 8.2, 1],
                                [15, 2, 9, 18.281, 3, 10, 4, 7.6, 1],
                                [8, 7, 17, 22.237, 6, 11, 2, 4.8, 1],
                                [10, 7, 16, 31.409, 1, 7, 5, 5.7, 1]])

X = dataset[:, 0:8]
y = dataset[:, 8]

#Creating model and Dense layers one by one specifying activation function
model = Sequential()
model.add(Dense(15, input_dim=8, activation='relu'))
model.add(Dense(10, activation='relu'))
model.add(Dense(12, activation='relu'))
model.add(Dense(1, activation='sigmoid')) #sigmoid insted of relu for final prediction

model.compile(loss="binary_crossentropy", optimizer="adam", metrics=['accuracy'])

model.fit(X, y, batch_size=4, epochs=1000)

scores=model.evaluate(X, y)
print("\n%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))